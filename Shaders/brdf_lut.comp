#version 460 core

/*
Shader to generate BRDF Lookup Table.
Based on https://learnopengl.com/PBR/IBL/Specular-IBL
*/

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) buffer SRC { float data[]; } src;
layout (set = 0, binding = 1) buffer DST { float data[]; } dst;

const uint BRDF_W = 256;
const uint BRDF_H = 256;
const uint SAMPLE_COUNT = 1024u;

const float PI = 3.1415926536;

#include <hammersley.frag>

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness * roughness;

	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

	// From spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	// From tangent-space H vector to world-space sample vector
	vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

float GeometrySchlickGGX(float NoV, float roughness)
{
	// Note that we use a different k for IBL
	float a = roughness;
	float k = (a * a) / 2.0;

	float nom = NoV;
	float denom = NoV * (1.0 - k) + k;

	return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
	float NoV = max(dot(N, V), 0.0);
	float NoL = max(dot(N, L), 0.0);
	float ggx2 = GeometrySchlickGGX(NoV, roughness);
	float ggx1 = GeometrySchlickGGX(NoL, roughness);

	return ggx1 * ggx2;
}

vec2 BRDF(float NoV, float roughness)
{
	vec3 V;
	V.x = sqrt(1.0 - NoV * NoV);
	V.y = 0.0;
	V.z = NoV;

	float A = 0.0;
	float B = 0.0;

	vec3 N = vec3(0.0, 0.0, 1.0);
	
	for (uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		// Generates a sample vector that's biased towards the
		// preferred alignment direction (importance sampling).
		vec2 Xi = Hammersley(i, SAMPLE_COUNT);
		vec3 H = ImportanceSampleGGX(Xi, N, roughness);
		vec3 L = normalize(2.0 * dot(V, H) * H - V);

		float NoL = max(L.z, 0.0);
		float NoH = max(H.z, 0.0);
		float VdotH = max(dot(V, H), 0.0);

		if (NoL > 0.0)
		{
			float G = GeometrySmith(N, V, L, roughness);
			float G_Vis = (G * VdotH) / (NoH * NoV);
			float Fc = pow(1.0 - VdotH, 5.0);

			A += (1.0 - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}
	A /= float(SAMPLE_COUNT);
	B /= float(SAMPLE_COUNT);
	return vec2(A, B);
}

void main() 
{
	vec2 uv;
	uv.x = (float(gl_GlobalInvocationID.x) + 0.5) / float(BRDF_W);
	uv.y = (float(gl_GlobalInvocationID.y) + 0.5) / float(BRDF_H);

	vec2 v = BRDF(uv.x, 1.0 - uv.y);

	uint offset = gl_GlobalInvocationID.y * BRDF_W + gl_GlobalInvocationID.x;

	dst.data[offset * 2 + 0] = v.x;
	dst.data[offset * 2 + 1] = v.y;
}
